version: '3.8'

services:
  # ===== API Service =====
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    ports:
      - "8080:8080"
    environment:
      - API_PORT=8080
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URI=mongodb://mongo:27017/aisent
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=secret123
      - MYSQL_DB=aisent
      - MODEL_BACKEND=rule
      - CACHE_TTL=600
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===== Worker Service =====
  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URI=mongodb://mongo:27017/aisent
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=secret123
      - MYSQL_DB=aisent
      - MODEL_BACKEND=rule
      - CELERY_WORKER_CONCURRENCY=2
      - LOG_LEVEL=INFO
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - ./logs:/app/logs
    restart: unless-stopped
    # Scale workers: docker compose up -d --scale worker=3
    deploy:
      replicas: 1

  # ===== Redis Cache & Queue =====
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MongoDB Document Store =====
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=aisent
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== MySQL Analytics DB =====
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret123
      - MYSQL_DATABASE=aisent
      - MYSQL_USER=aisent_user
      - MYSQL_PASSWORD=aisent_pass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./migrations/mysql:/docker-entrypoint-initdb.d:ro
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-psecret123"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===== Prometheus Metrics (Optional) =====
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles:
      - monitoring

  # ===== Grafana Dashboard (Optional) =====
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana:/etc/grafana/provisioning:ro
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  redis_data:
  mongo_data:
  mysql_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: ai-sentiment-network
