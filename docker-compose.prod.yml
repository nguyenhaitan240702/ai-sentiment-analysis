version: '3.8'

services:
  # ===== API Service (Production) =====
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - API_PORT=8080
      - API_WORKERS=4
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URI=mongodb://mongo:27017/aisent
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DB=aisent
      - MODEL_BACKEND=${MODEL_BACKEND:-rule}
      - CACHE_TTL=3600
      - LOG_LEVEL=WARNING
      - DEBUG=false
      - ENV=production
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - app_logs:/app/logs
    restart: always
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/healthz"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ===== Worker Service (Production) =====
  worker:
    build:
      context: .
      dockerfile: docker/worker.Dockerfile
      target: production
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URI=mongodb://mongo:27017/aisent
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DB=aisent
      - MODEL_BACKEND=${MODEL_BACKEND:-rule}
      - CELERY_WORKER_CONCURRENCY=4
      - LOG_LEVEL=WARNING
      - ENV=production
    depends_on:
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      mysql:
        condition: service_healthy
    volumes:
      - ./data:/app/data:ro
      - app_logs:/app/logs
    restart: always
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      - /app/tmp
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3

  # ===== Redis (Production) =====
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 512mb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    restart: always
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ===== MongoDB (Production) =====
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=aisent
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-secret123}
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod --auth --bind_ip_all --wiredTigerCacheSizeGB 0.5
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ===== MySQL (Production) =====
  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-secret123}
      - MYSQL_DATABASE=aisent
      - MYSQL_USER=aisent_user
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-aisent_pass}
    volumes:
      - mysql_data:/var/lib/mysql
      - mysql_config:/etc/mysql/conf.d
      - ./migrations/mysql:/docker-entrypoint-initdb.d:ro
    command: >
      --default-authentication-plugin=mysql_native_password
      --innodb-buffer-pool-size=256M
      --max-connections=200
      --query-cache-type=1
      --query-cache-size=64M
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ===== Nginx Load Balancer (Production) =====
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    profiles:
      - loadbalancer

volumes:
  redis_data:
    driver: local
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  mysql_data:
    driver: local
  mysql_config:
    driver: local
  app_logs:
    driver: local

networks:
  default:
    driver: overlay
    name: ai-sentiment-prod
