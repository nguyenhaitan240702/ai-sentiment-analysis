"""
Test script for conversation sentiment analysis
Tests the new conversation endpoint with various scenarios
"""

import asyncio
import json
import sys
import os
from datetime import datetime
from typing import Dict, Any

# Add project root to path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from apps.api.schemas.request import (
    ConversationSentimentRequest,
    ConversationMessage,
    ConversationContext,
    ConversationAnalysisOptions,
    ConversationParticipant
)
from apps.api.services.conversation_service import ConversationSentimentService
from apps.api.services.sentiment_service import SentimentService
from core.models.enhanced_rule_based import EnhancedRuleBasedModel

class ConversationTestRunner:
    """Test runner for conversation sentiment analysis"""

    def __init__(self):
        self.sentiment_service = None
        self.conversation_service = None

        # Test conversations
        self.test_conversations = [
            {
                "name": "Customer Service Resolution",
                "conversation": [
                    {"speaker": "customer", "text": "S·∫£n ph·∫©m n√†y b·ªã l·ªói ho√†i, t√¥i r·∫•t b·ª±c m√¨nh!"},
                    {"speaker": "agent", "text": "T√¥i r·∫•t hi·ªÉu c·∫£m gi√°c c·ªßa anh. ƒê·ªÉ t√¥i h·ªó tr·ª£ anh gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y nh√©."},
                    {"speaker": "customer", "text": "ƒê∆∞·ª£c, nh∆∞ng t√¥i ƒë√£ g·ªçi nhi·ªÅu l·∫ßn r·ªìi m√† ch∆∞a ai gi·∫£i quy·∫øt ƒë∆∞·ª£c."},
                    {"speaker": "agent", "text": "T√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y. T√¥i s·∫Ω x·ª≠ l√Ω ngay cho anh. Anh c√≥ th·ªÉ cho t√¥i m√£ s·∫£n ph·∫©m ƒë∆∞·ª£c kh√¥ng?"},
                    {"speaker": "customer", "text": "M√£ s·∫£n ph·∫©m l√† ABC123. T√¥i mong l√† l·∫ßn n√†y s·∫Ω ƒë∆∞·ª£c gi·∫£i quy·∫øt."},
                    {"speaker": "agent", "text": "T√¥i ƒë√£ ki·ªÉm tra v√† s·∫Ω g·ª≠i s·∫£n ph·∫©m thay th·∫ø cho anh ngay h√¥m nay. Anh s·∫Ω nh·∫≠n ƒë∆∞·ª£c trong 24h."},
                    {"speaker": "customer", "text": "C·∫£m ∆°n, nh∆∞ v·∫≠y l√† t·ªët r·ªìi. T√¥i h√†i l√≤ng v·ªõi c√°ch gi·∫£i quy·∫øt n√†y."}
                ],
                "context": {
                    "domain": "customer_service",
                    "conversation_type": "support_ticket",
                    "participants": {
                        "customer": {"role": "customer", "segment": "regular"},
                        "agent": {"role": "support_agent", "experience_level": "senior"}
                    }
                }
            },
            {
                "name": "Sales Conversation",
                "conversation": [
                    {"speaker": "prospect", "text": "T√¥i ƒëang quan t√¢m ƒë·∫øn s·∫£n ph·∫©m c·ªßa c√°c b·∫°n."},
                    {"speaker": "sales", "text": "C·∫£m ∆°n anh ƒë√£ quan t√¢m! T√¥i c√≥ th·ªÉ gi·ªõi thi·ªáu chi ti·∫øt v·ªÅ s·∫£n ph·∫©m cho anh."},
                    {"speaker": "prospect", "text": "Gi√° c·∫£ th·∫ø n√†o? C√≥ ƒë·∫Øt kh√¥ng?"},
                    {"speaker": "sales", "text": "V·ªõi ch·∫•t l∆∞·ª£ng v√† t√≠nh nƒÉng c·ªßa s·∫£n ph·∫©m, gi√° r·∫•t h·ª£p l√Ω. Ch√∫ng t√¥i c√≥ nhi·ªÅu g√≥i ƒë·ªÉ anh l·ª±a ch·ªçn."},
                    {"speaker": "prospect", "text": "Nghe c√≥ v·∫ª hay ƒë·∫•y. T√¥i c·∫ßn suy nghƒ© th√™m."},
                    {"speaker": "sales", "text": "Kh√¥ng v·∫•n ƒë·ªÅ g√¨! T√¥i s·∫Ω g·ª≠i t√†i li·ªáu chi ti·∫øt cho anh. Anh c√≥ th·ªÉ li√™n h·ªá khi n√†o c·∫ßn h·ªó tr·ª£."}
                ],
                "context": {
                    "domain": "sales",
                    "conversation_type": "sales_inquiry"
                }
            },
            {
                "name": "Escalated Complaint",
                "conversation": [
                    {"speaker": "customer", "text": "D·ªãch v·ª• c·ªßa c√°c b·∫°n qu√° t·ªá! T√¥i ƒë√£ ch·ªù 2 ti·∫øng m√† kh√¥ng ƒë∆∞·ª£c gi·∫£i quy·∫øt!"},
                    {"speaker": "agent", "text": "T√¥i hi·ªÉu anh r·∫•t b·ª±c m√¨nh. ƒê·ªÉ t√¥i xem th√¥ng tin..."},
                    {"speaker": "customer", "text": "T√¥i kh√¥ng mu·ªën ch·ªù n·ªØa! ƒê√¢y l√† l·∫ßn th·ª© 3 t√¥i g·ªçi v√†o r·ªìi!"},
                    {"speaker": "agent", "text": "T√¥i th·∫≠t s·ª± xin l·ªói v·ªÅ s·ª± b·∫•t ti·ªán n√†y. T√¥i s·∫Ω chuy·ªÉn cho supervisor ƒë·ªÉ gi·∫£i quy·∫øt ngay."},
                    {"speaker": "supervisor", "text": "Ch√†o anh, t√¥i l√† supervisor. T√¥i ƒë√£ xem qua v·∫•n ƒë·ªÅ v√† s·∫Ω gi·∫£i quy·∫øt ngay l·∫≠p t·ª©c."},
                    {"speaker": "customer", "text": "Cu·ªëi c√πng c≈©ng c√≥ ng∆∞·ªùi c√≥ th·∫©m quy·ªÅn! T√¥i mu·ªën ƒë∆∞·ª£c b·ªìi th∆∞·ªùng."},
                    {"speaker": "supervisor", "text": "Ho√†n to√†n h·ª£p l√Ω. Ch√∫ng t√¥i s·∫Ω ho√†n ti·ªÅn v√† t·∫∑ng th√™m voucher 500k ƒë·ªÉ b√π ƒë·∫Øp."},
                    {"speaker": "customer", "text": "ƒê∆∞·ª£c r·ªìi, nh∆∞ v·∫≠y l√† ·ªïn. C·∫£m ∆°n ƒë√£ gi·∫£i quy·∫øt nhanh ch√≥ng."}
                ],
                "context": {
                    "domain": "customer_service",
                    "conversation_type": "escalated_complaint"
                }
            }
        ]

    async def initialize(self):
        """Initialize services"""
        print("üöÄ Initializing Conversation Sentiment Analysis Test...")

        # Initialize enhanced model
        model = EnhancedRuleBasedModel()
        await model.load()

        # Create mock model manager
        class MockModelManager:
            def __init__(self):
                self.model = model
                self.default_model = "enhanced_rule_based_vi"

            async def predict(self, text, language="vi"):
                return await self.model.predict(text, language)

        model_manager = MockModelManager()

        # Initialize sentiment service
        self.sentiment_service = SentimentService()
        await self.sentiment_service.initialize(model_manager)

        print("‚úÖ Services initialized successfully!")

    async def test_conversation(self, test_case: Dict[str, Any]):
        """Test a single conversation"""
        print(f"\nüìä Testing: {test_case['name']}")
        print("-" * 50)

        # Create conversation messages
        messages = []
        for i, msg in enumerate(test_case['conversation']):
            message = ConversationMessage(
                message_id=f"msg_{i}",
                speaker=msg['speaker'],
                text=msg['text'],
                timestamp=datetime.now()
            )
            messages.append(message)

        # Create context
        context = None
        if 'context' in test_case:
            participants = {}
            for speaker, participant_data in test_case['context'].get('participants', {}).items():
                participants[speaker] = ConversationParticipant(**participant_data)

            context = ConversationContext(
                domain=test_case['context'].get('domain'),
                conversation_type=test_case['context'].get('conversation_type'),
                participants=participants
            )

        # Create request
        request = ConversationSentimentRequest(
            conversation=messages,
            context=context,
            analysis_options=ConversationAnalysisOptions(
                include_emotional_flow=True,
                include_participant_analysis=True,
                include_escalation_tracking=True,
                include_summary=True,
                granularity="detailed"
            )
        )

        # Analyze conversation
        try:
            result = await self.sentiment_service.analyze_conversation(request)

            # Print results
            self._print_results(result, test_case['name'])

            return True

        except Exception as e:
            print(f"‚ùå Test failed: {e}")
            import traceback
            traceback.print_exc()
            return False

    def _print_results(self, result, test_name):
        """Print formatted results"""
        print(f"üéØ Overall Sentiment: {result.overall_sentiment.label.upper()} (confidence: {result.overall_sentiment.score:.3f})")
        print(f"üó£Ô∏è  Conversation Type: {result.conversation_type}")

        print(f"\nüìà Emotional Flow:")
        print(f"   Trajectory: {result.emotional_flow.trajectory}")
        print(f"   Stability: {result.emotional_flow.stability}")
        print(f"   Dominant Emotion: {result.emotional_flow.dominant_emotion}")
        if result.emotional_flow.turning_points:
            print(f"   Turning Points: {len(result.emotional_flow.turning_points)}")
            for tp in result.emotional_flow.turning_points:
                print(f"      ‚Ä¢ Message {tp.message_index}: {tp.from_sentiment} ‚Üí {tp.to_sentiment} ({tp.trigger})")

        print(f"\nüë• Participants:")
        for speaker, analysis in result.participants.items():
            print(f"   {speaker.upper()}:")
            print(f"      Overall: {analysis.overall_sentiment} (score: {analysis.overall_score:.3f})")
            print(f"      Attitude: {analysis.attitude}")
            print(f"      Style: {analysis.communication_style}")
            print(f"      Engagement: {analysis.engagement_level}")
            if analysis.dominant_emotions:
                print(f"      Emotions: {', '.join(analysis.dominant_emotions)}")

        print(f"\nüî• Escalation Analysis:")
        print(f"   Level: {result.escalation_analysis.escalation_level}")
        print(f"   Trend: {result.escalation_analysis.escalation_trend}")
        print(f"   Conflict Intensity: {result.escalation_analysis.conflict_intensity:.3f}")
        if result.escalation_analysis.resolution_indicators:
            print(f"   Resolution Signs: {', '.join(result.escalation_analysis.resolution_indicators)}")

        print(f"\nüìã Summary:")
        print(f"   Topics: {', '.join(result.conversation_summary.main_topics) if result.conversation_summary.main_topics else 'None detected'}")
        print(f"   Issues: {', '.join(result.conversation_summary.key_issues) if result.conversation_summary.key_issues else 'None detected'}")
        print(f"   Resolution: {result.conversation_summary.resolution_status}")
        print(f"   Outcome: {result.conversation_summary.conversation_outcome}")

        print(f"\n‚≠ê Quality Metrics:")
        print(f"   Communication: {result.conversation_quality.communication_quality}")
        print(f"   Professionalism: {result.conversation_quality.professionalism_level}")
        print(f"   Empathy: {result.conversation_quality.empathy_score:.3f}")
        print(f"   Solution Effectiveness: {result.conversation_quality.solution_effectiveness:.3f}")
        print(f"   Customer Satisfaction: {result.conversation_quality.customer_satisfaction_score:.3f}")

        print(f"\n‚ö° Performance:")
        metadata = result.analysis_metadata
        print(f"   Processing Time: {metadata.get('processing_time_ms', 0)}ms")
        print(f"   Messages: {metadata.get('message_count', 0)}")
        print(f"   Participants: {metadata.get('participant_count', 0)}")

    async def run_all_tests(self):
        """Run all conversation tests"""
        await self.initialize()

        print("\n" + "="*60)
        print("üß™ CONVERSATION SENTIMENT ANALYSIS TESTS")
        print("="*60)

        passed = 0
        total = len(self.test_conversations)

        for test_case in self.test_conversations:
            success = await self.test_conversation(test_case)
            if success:
                passed += 1

        print("\n" + "="*60)
        print(f"üìä TEST SUMMARY: {passed}/{total} tests passed ({passed/total*100:.1f}%)")
        print("="*60)

        if passed == total:
            print("üéâ All tests passed! Conversation sentiment analysis is working correctly.")
        else:
            print(f"‚ö†Ô∏è  {total - passed} test(s) failed. Please check the errors above.")

async def main():
    """Main test function"""
    runner = ConversationTestRunner()
    await runner.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())
